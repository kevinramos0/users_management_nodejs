"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.parseOrThrow = exports.parse = exports.isValid = exports.getPieces = exports.createErrorCreator = exports.cloneDate = void 0;

const isValid = date => !isNaN(date.getTime());

exports.isValid = isValid;

const parseOrThrow = (subject, parser) => {
  const parsed = parser(subject);
  if (!isValid(parsed)) throw new Error(`Unable to parse ${subject}`);
  return parsed;
};

exports.parseOrThrow = parseOrThrow;

const createErrorCreator = validator => error => validator.errors = [error];

exports.createErrorCreator = createErrorCreator;

const parse = (subject, parser, createError, then) => {
  try {
    return then(parseOrThrow(subject, parser));
  } catch {
    createError({
      message: `Unable to parse date ${subject}`
    });
  }
};

exports.parse = parse;
const methods = ['getFullYear', 'getMonth', 'getDate', 'getHours', 'getMinutes', 'getSeconds', 'getMilliseconds'];

const getPieces = function (date) {
  for (var _len = arguments.length, methods = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    methods[_key - 1] = arguments[_key];
  }

  return methods.map(m => date[m]());
};

exports.getPieces = getPieces;

const cloneDate = function (date) {
  for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
    args[_key2 - 1] = arguments[_key2];
  }

  return new Date(...methods.slice(0, methods.length - args.length).map(m => date[m]()), ...args);
};

exports.cloneDate = cloneDate;